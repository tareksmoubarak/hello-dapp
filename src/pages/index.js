import { useEffect, useState } from 'react'
import {
  helloWorldContract,
  connectWallet,
  updateMessage,
  loadCurrentMessage,
  getCurrentWalletConnected,
} from "@/util/interact.js";
import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {

  //state variables
  const [walletAddress, setWallet] = useState("");
  const [status, setStatus] = useState("");
  const [message, setMessage] = useState("Loading..."); //default message
  const [newMessage, setNewMessage] = useState("");

  const getMessage = async() => {
    const message = await loadCurrentMessage();
    setMessage((message) ? message : 'No connection to the network.');
  }

  const getWallet = async() => {
    const {address, status} = await getCurrentWalletConnected();
    setWallet(address);
    setStatus(status);
  }

  //called only once
  useEffect(() => {
    getMessage();
    addSmartContractListener();

    getWallet();

    addWalletListener();
  }, []);
 
  function addSmartContractListener() { //TODO: implement
    helloWorldContract.events.UpdatedMessages({}, (error, data) => {
      if (error) {
        setStatus("😥 " + error.message);
      } else {
        setMessage(data.returnValues[1]);
        setNewMessage("");
        setStatus("🎉 Your message has been updated!");
      }
    });
  }

  function addWalletListener() { //TODO: implement
    if (window.ethereum) {
      window.ethereum.on("accountsChanged", (accounts) => {
        if (accounts.length > 0) {
          setWallet(accounts[0]);
          setStatus("👆🏽 Write a message in the text-field above.");
        } else {
          setWallet("");
          setStatus("🦊 Connect to Metamask using the top right button.");
        }
      });
    } else {
      setStatus(
        <p>
          {" "}
          🦊{" "}
          <a target="_blank" href={`https://metamask.io/download.html`}>
            You must install Metamask, a virtual Ethereum wallet, in your
            browser.
          </a>
        </p>
      );
    }
  }

  const connectWalletPressed = async () => {
    const walletResponse = await connectWallet();
    setStatus(walletResponse.status);
    setWallet(walletResponse.address);
  };

  const onUpdatePressed = async () => {
    const { status } = await updateMessage(walletAddress, newMessage);
    setStatus(status);
  };

  return (
    <>
      <Head>
        <title>Hello DAPP Tarek Moubarak</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.description}>
          <p>
            First DAPP Project Tarek S. Moubarak&nbsp;
          </p>
          <div className="wallet-wrapper">
            <a onClick={connectWalletPressed} style={{textDecoration: 'underline'}}>
              {walletAddress.length > 0 ? (
                "Connected: " +
                String(walletAddress).substring(0, 6) +
                "..." +
                String(walletAddress).substring(38)
              ) : (
                <span>Connect Wallet</span>
              )}
            </a>
          </div>
        </div>

        <div style={{width: 500, maxWidth: '100%'}}>
          <div className='row'>
            <div div className="form-group">
              <label htmlFor="exampleInputEmail1">Current Message</label>
              <input type="text" disabled className="form-control" placeholder={message} />
            </div>
          </div>
          <div className='row mt-3'>
            <div className='col-12'>
            <div className="form-group">
              <label htmlFor="exampleInputEmail1">New Message</label>
              <input type="text" className="form-control" placeholder="Update the message in your smart contract" onChange={(e) => setNewMessage(e.target.value)} value={newMessage}/>
              <p id="status">{status}</p>
            </div>
            <button onClick={onUpdatePressed} style={{marginTop: 20, float: 'right'}}>Submit</button>
            </div>
          </div>
        </div>

        <div className={styles.grid}>
          
        </div>
      </main>
    </>
  )
}
